"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var diagnostics_exports = {};
__export(diagnostics_exports, {
  DiagnosticCodes: () => DiagnosticCodes,
  decorateDiagnostics: () => decorateDiagnostics
});
module.exports = __toCommonJS(diagnostics_exports);
var import_utils = require("../utils.js");
var DiagnosticCodes = /* @__PURE__ */ ((DiagnosticCodes2) => {
  DiagnosticCodes2[DiagnosticCodes2["CANNOT_FIND_MODULE"] = 2307] = "CANNOT_FIND_MODULE";
  return DiagnosticCodes2;
})(DiagnosticCodes || {});
function decorateDiagnostics(ls, typescript) {
  decorateSyntacticDiagnostics(ls);
  decorateSemanticDiagnostics(ls, typescript);
  decorateSuggestionDiagnostics(ls);
}
function decorateSyntacticDiagnostics(ls) {
  const getSyntacticDiagnostics = ls.getSyntacticDiagnostics;
  ls.getSyntacticDiagnostics = (fileName) => {
    if ((0, import_utils.isAstroFilePath)(fileName)) {
      return [];
    }
    return getSyntacticDiagnostics(fileName);
  };
}
function decorateSemanticDiagnostics(ls, typescript) {
  const getSemanticDiagnostics = ls.getSemanticDiagnostics;
  ls.getSemanticDiagnostics = (fileName) => {
    if ((0, import_utils.isAstroFilePath)(fileName)) {
      return [];
    }
    let diagnostics = getSemanticDiagnostics(fileName);
    diagnostics = diagnostics.map((diag) => {
      const message = typescript.flattenDiagnosticMessageText(diag.messageText, typescript.sys.newLine);
      if (diag.code === 2307 /* CANNOT_FIND_MODULE */ && message.includes("astro:content") && !message.includes("content collections")) {
        diag.messageText = message + `${typescript.sys.newLine}${typescript.sys.newLine}If you're using content collections, make sure to run \`astro dev\`, \`astro build\` or \`astro sync\` to first generate the types so you can import from them. If you already ran one of those commands, restarting the TS Server might be necessary in order for the change to take effect.`;
      }
      return diag;
    });
    return diagnostics;
  };
}
function decorateSuggestionDiagnostics(ls) {
  const getSuggestionDiagnostics = ls.getSuggestionDiagnostics;
  ls.getSuggestionDiagnostics = (fileName) => {
    if ((0, import_utils.isAstroFilePath)(fileName)) {
      return [];
    }
    return getSuggestionDiagnostics(fileName);
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DiagnosticCodes,
  decorateDiagnostics
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2xhbmd1YWdlLXNlcnZpY2UvZGlhZ25vc3RpY3MudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxtQkFBZ0M7QUFJekIsSUFBSyxrQkFBTCxrQkFBS0EscUJBQUw7QUFDTixFQUFBQSxrQ0FBQSx3QkFBcUIsUUFBckI7QUFEVyxTQUFBQTtBQUFBLEdBQUE7QUFJTCxTQUFTLG9CQUFvQixJQUF3QixZQUF1QjtBQUNsRiwrQkFBNkIsRUFBRTtBQUMvQiw4QkFBNEIsSUFBSSxVQUFVO0FBQzFDLGdDQUE4QixFQUFFO0FBQ2pDO0FBRUEsU0FBUyw2QkFBNkIsSUFBOEI7QUFDbkUsUUFBTSwwQkFBMEIsR0FBRztBQUNuQyxLQUFHLDBCQUEwQixDQUFDLGFBQXFCO0FBR2xELFlBQUksOEJBQWdCLFFBQVEsR0FBRztBQUM5QixhQUFPLENBQUM7QUFBQSxJQUNUO0FBQ0EsV0FBTyx3QkFBd0IsUUFBUTtBQUFBLEVBQ3hDO0FBQ0Q7QUFFQSxTQUFTLDRCQUE0QixJQUF3QixZQUF1QjtBQUNuRixRQUFNLHlCQUF5QixHQUFHO0FBQ2xDLEtBQUcseUJBQXlCLENBQUMsYUFBcUI7QUFHakQsWUFBSSw4QkFBZ0IsUUFBUSxHQUFHO0FBQzlCLGFBQU8sQ0FBQztBQUFBLElBQ1Q7QUFFQSxRQUFJLGNBQWMsdUJBQXVCLFFBQVE7QUFDakQsa0JBQWMsWUFBWSxJQUFJLENBQUMsU0FBUztBQUN2QyxZQUFNLFVBQVUsV0FBVyw2QkFBNkIsS0FBSyxhQUFhLFdBQVcsSUFBSSxPQUFPO0FBQ2hHLFVBQ0MsS0FBSyxTQUFTLGlDQUNkLFFBQVEsU0FBUyxlQUFlLEtBR2hDLENBQUMsUUFBUSxTQUFTLHFCQUFxQixHQUN0QztBQUNELGFBQUssY0FDSixVQUNBLEdBQUcsV0FBVyxJQUFJLFVBQVUsV0FBVyxJQUFJO0FBQUEsTUFFN0M7QUFFQSxhQUFPO0FBQUEsSUFDUixDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1I7QUFDRDtBQUVBLFNBQVMsOEJBQThCLElBQThCO0FBQ3BFLFFBQU0sMkJBQTJCLEdBQUc7QUFDcEMsS0FBRywyQkFBMkIsQ0FBQyxhQUFxQjtBQUduRCxZQUFJLDhCQUFnQixRQUFRLEdBQUc7QUFDOUIsYUFBTyxDQUFDO0FBQUEsSUFDVDtBQUNBLFdBQU8seUJBQXlCLFFBQVE7QUFBQSxFQUN6QztBQUNEOyIsCiAgIm5hbWVzIjogWyJEaWFnbm9zdGljQ29kZXMiXQp9Cg==
