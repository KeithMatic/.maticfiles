"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var module_loader_exports = {};
__export(module_loader_exports, {
  patchModuleLoader: () => patchModuleLoader
});
module.exports = __toCommonJS(module_loader_exports);
var import_astro_sys = require("./astro-sys.js");
var import_utils = require("./utils.js");
class ModuleResolutionCache {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
  }
  get(moduleName, containingFile) {
    return this.cache.get(this.getKey(moduleName, containingFile));
  }
  set(moduleName, containingFile, resolvedModule) {
    if (!resolvedModule) {
      return;
    }
    this.cache.set(this.getKey(moduleName, containingFile), resolvedModule);
  }
  delete(resolvedModuleName) {
    this.cache.forEach((val, key) => {
      if (val.resolvedFileName === resolvedModuleName) {
        this.cache.delete(key);
      }
    });
  }
  getKey(moduleName, containingFile) {
    return containingFile + ":::" + (0, import_utils.ensureRealAstroFilePath)(moduleName);
  }
}
function patchModuleLoader(logger, snapshotManager, typescript, lsHost, project) {
  var _a, _b;
  const astroSys = (0, import_astro_sys.createAstroSys)(logger, typescript);
  const moduleCache = new ModuleResolutionCache();
  const origResolveModuleNames = (_a = lsHost.resolveModuleNames) == null ? void 0 : _a.bind(lsHost);
  const origResolveModuleNamLiterals = (_b = lsHost.resolveModuleNameLiterals) == null ? void 0 : _b.bind(lsHost);
  if (lsHost.resolveModuleNameLiterals) {
    lsHost.resolveModuleNameLiterals = resolveModuleNameLiterals;
  } else {
    lsHost.resolveModuleNames = resolveModuleNames;
  }
  const origRemoveFile = project.removeFile.bind(project);
  project.removeFile = (info, fileExists, detachFromProject) => {
    logger.log("File is being removed. Delete from cache: ", info.fileName);
    moduleCache.delete(info.fileName);
    return origRemoveFile(info, fileExists, detachFromProject);
  };
  const origReadDirectory = project.readDirectory.bind(project);
  project.readDirectory = (path, extensions, exclude, include, depth) => {
    const extensionsWithAstro = (extensions != null ? extensions : []).concat(".astro", ".md", ".mdx");
    return origReadDirectory(path, extensionsWithAstro, exclude, include, depth);
  };
  function resolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions) {
    const resolved = (origResolveModuleNames == null ? void 0 : origResolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions)) || Array.from(Array(moduleNames.length));
    return resolved.map((moduleName, idx) => {
      const fileName = moduleNames[idx];
      if (moduleName || !(0, import_utils.ensureRealAstroFilePath)(fileName).endsWith(".astro")) {
        return moduleName;
      }
      const cachedModule = moduleCache.get(fileName, containingFile);
      if (cachedModule) {
        return cachedModule;
      }
      const resolvedModule = resolveModuleName(fileName, containingFile, compilerOptions);
      moduleCache.set(fileName, containingFile, resolvedModule);
      return resolvedModule;
    });
  }
  function resolveModuleName(name, containingFile, compilerOptions) {
    const astroResolvedModule = typescript.resolveModuleName(
      name,
      containingFile,
      compilerOptions,
      astroSys
    ).resolvedModule;
    if (!astroResolvedModule || !(0, import_utils.isVirtualAstroFilePath)(astroResolvedModule.resolvedFileName)) {
      return astroResolvedModule;
    }
    const resolvedFileName = (0, import_utils.ensureRealAstroFilePath)(astroResolvedModule.resolvedFileName);
    logger.log("Resolved", name, "to astro file", resolvedFileName);
    const snapshot = snapshotManager.create(resolvedFileName);
    if (!snapshot) {
      return void 0;
    }
    const resolvedAstroModule = {
      extension: typescript.Extension.Tsx,
      resolvedFileName
    };
    return resolvedAstroModule;
  }
  function resolveModuleNameLiterals(moduleLiterals, containingFile, redirectedReference, options, containingSourceFile, reusedNames) {
    var _a2;
    logger.log("Resolving modules names for " + containingFile);
    const resolved = (_a2 = origResolveModuleNamLiterals == null ? void 0 : origResolveModuleNamLiterals(
      moduleLiterals,
      containingFile,
      redirectedReference,
      options,
      containingSourceFile,
      reusedNames
    )) != null ? _a2 : moduleLiterals.map(
      () => ({
        resolvedModule: void 0
      })
    );
    return resolved.map((tsResolvedModule, idx) => {
      const moduleName = moduleLiterals[idx].text;
      if (tsResolvedModule.resolvedModule || !(0, import_utils.ensureRealAstroFilePath)(moduleName).endsWith(".astro")) {
        return tsResolvedModule;
      }
      return resolveAstroModuleNameFromCache(moduleName, containingFile, options);
    });
  }
  function resolveAstroModuleNameFromCache(moduleName, containingFile, options) {
    const cachedModule = moduleCache.get(moduleName, containingFile);
    if (cachedModule) {
      return {
        resolvedModule: cachedModule
      };
    }
    const resolvedModule = resolveModuleName(moduleName, containingFile, options);
    moduleCache.set(moduleName, containingFile, resolvedModule);
    return {
      resolvedModule
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  patchModuleLoader
});
//# sourceMappingURL=data:application/json;base64,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QXNCLFdBQVc7QUFBQSxNQUN0QztBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0QsRUFBRTtBQUNGLFFBQUksQ0FBQyx1QkFBdUIsS0FBQyxxQ0FBdUIsb0JBQW9CLGdCQUFnQixHQUFHO0FBQzFGLGFBQU87QUFBQSxJQUNSO0FBRUEsVUFBTSx1QkFBbUIsc0NBQXdCLG9CQUFvQixnQkFBZ0I7QUFDckYsV0FBTyxJQUFJLFlBQVksTUFBTSxpQkFBaUIsZ0JBQWdCO0FBQzlELFVBQU0sV0FBVyxnQkFBZ0IsT0FBTyxnQkFBZ0I7QUFDeEQsUUFBSSxDQUFDLFVBQVU7QUFDZCxhQUFPO0FBQUEsSUFDUjtBQUVBLFVBQU0sc0JBQTZDO0FBQUEsTUFDbEQsV0FBVyxXQUFXLFVBQVU7QUFBQSxNQUNoQztBQUFBLElBQ0Q7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLFdBQVMsMEJBQ1IsZ0JBQ0EsZ0JBQ0EscUJBQ0EsU0FDQSxzQkFDQSxhQUN3RDtBQTdKMUQsUUFBQUE7QUE4SkUsV0FBTyxJQUFJLGlDQUFpQyxjQUFjO0FBSzFELFVBQU0sWUFDTEEsTUFBQTtBQUFBLE1BQ0M7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLFVBTkQsT0FBQUEsTUFRQSxlQUFlO0FBQUEsTUFDZCxPQUFtRDtBQUFBLFFBQ2xELGdCQUFnQjtBQUFBLE1BQ2pCO0FBQUEsSUFDRDtBQUVELFdBQU8sU0FBUyxJQUFJLENBQUMsa0JBQWtCLFFBQVE7QUFDOUMsWUFBTSxhQUFhLGVBQWUsS0FBSztBQUN2QyxVQUFJLGlCQUFpQixrQkFBa0IsS0FBQyxzQ0FBd0IsVUFBVSxFQUFFLFNBQVMsUUFBUSxHQUFHO0FBQy9GLGVBQU87QUFBQSxNQUNSO0FBRUEsYUFBTyxnQ0FBZ0MsWUFBWSxnQkFBZ0IsT0FBTztBQUFBLElBQzNFLENBQUM7QUFBQSxFQUNGO0FBRUEsV0FBUyxnQ0FBZ0MsWUFBb0IsZ0JBQXdCLFNBQTZCO0FBQ2pILFVBQU0sZUFBZSxZQUFZLElBQUksWUFBWSxjQUFjO0FBQy9ELFFBQUksY0FBYztBQUNqQixhQUFPO0FBQUEsUUFDTixnQkFBZ0I7QUFBQSxNQUNqQjtBQUFBLElBQ0Q7QUFFQSxVQUFNLGlCQUFpQixrQkFBa0IsWUFBWSxnQkFBZ0IsT0FBTztBQUM1RSxnQkFBWSxJQUFJLFlBQVksZ0JBQWdCLGNBQWM7QUFDMUQsV0FBTztBQUFBLE1BQ047QUFBQSxJQUNEO0FBQUEsRUFDRDtBQUNEOyIsCiAgIm5hbWVzIjogWyJfYSJdCn0K
