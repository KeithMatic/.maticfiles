"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var language_service_exports = {};
__export(language_service_exports, {
  decorateLanguageService: () => decorateLanguageService,
  isPatched: () => isPatched
});
module.exports = __toCommonJS(language_service_exports);
var import_completions = require("./completions.js");
var import_definition = require("./definition.js");
var import_diagnostics = require("./diagnostics.js");
var import_file_references = require("./file-references.js");
var import_find_references = require("./find-references.js");
var import_implementation = require("./implementation.js");
var import_line_column_offset = require("./line-column-offset.js");
var import_rename = require("./rename.js");
const astroPluginPatchSymbol = Symbol("astroPluginPatchSymbol");
function isPatched(ls) {
  return ls[astroPluginPatchSymbol] === true;
}
function decorateLanguageService(ls, snapshotManager, logger) {
  const proxy = new Proxy(ls, createProxyHandler());
  (0, import_line_column_offset.decorateLineColumnOffset)(proxy, snapshotManager);
  (0, import_rename.decorateRename)(proxy, snapshotManager, logger);
  (0, import_diagnostics.decorateDiagnostics)(proxy);
  (0, import_find_references.decorateFindReferences)(proxy, snapshotManager, logger);
  (0, import_completions.decorateCompletions)(proxy, logger);
  (0, import_definition.decorateGetDefinition)(proxy, snapshotManager);
  (0, import_implementation.decorateGetImplementation)(proxy, snapshotManager);
  (0, import_file_references.decorateGetFileReferences)(proxy, snapshotManager);
  return proxy;
}
function createProxyHandler() {
  const decorated = {};
  return {
    get(target, p) {
      var _a;
      if (p === astroPluginPatchSymbol) {
        return true;
      }
      return (_a = decorated[p]) != null ? _a : target[p];
    },
    set(_, p, value) {
      decorated[p] = value;
      return true;
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decorateLanguageService,
  isPatched
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2xhbmd1YWdlLXNlcnZpY2UvaW5kZXgudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQSx5QkFBb0M7QUFDcEMsd0JBQXNDO0FBQ3RDLHlCQUFvQztBQUNwQyw2QkFBMEM7QUFDMUMsNkJBQXVDO0FBQ3ZDLDRCQUEwQztBQUMxQyxnQ0FBeUM7QUFDekMsb0JBQStCO0FBRS9CLE1BQU0seUJBQXlCLE9BQU8sd0JBQXdCO0FBRXZELFNBQVMsVUFBVSxJQUF3QjtBQUNqRCxTQUFRLEdBQVcsNEJBQTRCO0FBQ2hEO0FBRU8sU0FBUyx3QkFDZixJQUNBLGlCQUNBLFFBQ3FCO0FBQ3JCLFFBQU0sUUFBUSxJQUFJLE1BQU0sSUFBSSxtQkFBbUIsQ0FBQztBQUVoRCwwREFBeUIsT0FBTyxlQUFlO0FBQy9DLG9DQUFlLE9BQU8saUJBQWlCLE1BQU07QUFDN0MsOENBQW9CLEtBQUs7QUFDekIscURBQXVCLE9BQU8saUJBQWlCLE1BQU07QUFDckQsOENBQW9CLE9BQU8sTUFBTTtBQUNqQywrQ0FBc0IsT0FBTyxlQUFlO0FBQzVDLHVEQUEwQixPQUFPLGVBQWU7QUFDaEQsd0RBQTBCLE9BQU8sZUFBZTtBQUVoRCxTQUFPO0FBQ1I7QUFFQSxTQUFTLHFCQUF1RDtBQUMvRCxRQUFNLFlBQXlDLENBQUM7QUFFaEQsU0FBTztBQUFBLElBQ04sSUFBSSxRQUFRLEdBQUc7QUF6Q2pCO0FBMENHLFVBQUksTUFBTSx3QkFBd0I7QUFDakMsZUFBTztBQUFBLE1BQ1I7QUFFQSxjQUFPLGVBQVUsT0FBVixZQUE0QyxPQUFPO0FBQUEsSUFDM0Q7QUFBQSxJQUNBLElBQUksR0FBRyxHQUFHLE9BQU87QUFDaEIsZ0JBQVUsS0FBaUM7QUFFM0MsYUFBTztBQUFBLElBQ1I7QUFBQSxFQUNEO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
